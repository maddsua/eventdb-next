// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type ActivityPoint struct {
	Value int      `json:"value"`
	Level LogLevel `json:"level"`
}

type DataStream struct {
	ID      uuid.UUID     `json:"id"`
	PushKey *string       `json:"push_key,omitempty"`
	Name    string        `json:"name"`
	Created time.Time     `json:"created"`
	Updated time.Time     `json:"updated"`
	Events  []StreamEvent `json:"events"`
}

type DataStreamsPage struct {
	Entries []DataStream `json:"entries"`
	HasNext bool         `json:"has_next"`
}

type EventField struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Mutation struct {
}

type Query struct {
}

type SigninState struct {
	Expires  time.Time    `json:"expires"`
	Username *string      `json:"username,omitempty"`
	Status   SigninStatus `json:"status"`
}

type StreamEvent struct {
	ID            uuid.UUID    `json:"id"`
	Stream        DataStream   `json:"stream"`
	ClientIP      *string      `json:"client_ip,omitempty"`
	TransactionID *string      `json:"transaction_id,omitempty"`
	Date          time.Time    `json:"date"`
	Message       string       `json:"message"`
	Level         LogLevel     `json:"level"`
	Fields        []EventField `json:"fields"`
}

type Subscription struct {
}

type UserAuthState struct {
	UserID   uuid.UUID `json:"user_id"`
	Expires  time.Time `json:"expires"`
	Username string    `json:"username"`
}

type LogLevel string

const (
	LogLevelInfo    LogLevel = "INFO"
	LogLevelWarning LogLevel = "WARNING"
	LogLevelError   LogLevel = "ERROR"
	LogLevelDebug   LogLevel = "DEBUG"
)

var AllLogLevel = []LogLevel{
	LogLevelInfo,
	LogLevelWarning,
	LogLevelError,
	LogLevelDebug,
}

func (e LogLevel) IsValid() bool {
	switch e {
	case LogLevelInfo, LogLevelWarning, LogLevelError, LogLevelDebug:
		return true
	}
	return false
}

func (e LogLevel) String() string {
	return string(e)
}

func (e *LogLevel) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogLevel", str)
	}
	return nil
}

func (e LogLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SigninStatus string

const (
	SigninStatusNeeds2fa SigninStatus = "NEEDS_2FA"
	SigninStatusComplete SigninStatus = "COMPLETE"
)

var AllSigninStatus = []SigninStatus{
	SigninStatusNeeds2fa,
	SigninStatusComplete,
}

func (e SigninStatus) IsValid() bool {
	switch e {
	case SigninStatusNeeds2fa, SigninStatusComplete:
		return true
	}
	return false
}

func (e SigninStatus) String() string {
	return string(e)
}

func (e *SigninStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SigninStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SigninStatus", str)
	}
	return nil
}

func (e SigninStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
