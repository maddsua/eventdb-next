package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/maddsua/eventdb-next/gql/resolvers/model"
)

// AuthSigninPassword is the resolver for the authSigninPassword field.
func (r *mutationResolver) AuthSigninPassword(ctx context.Context, username string, password string) (*model.SigninState, error) {
	panic(fmt.Errorf("not implemented: AuthSigninPassword - authSigninPassword"))
}

// AuthSigninVerify2fa is the resolver for the authSigninVerify2fa field.
func (r *mutationResolver) AuthSigninVerify2fa(ctx context.Context, code int) (*model.SigninState, error) {
	panic(fmt.Errorf("not implemented: AuthSigninVerify2fa - authSigninVerify2fa"))
}

// AuthSignout is the resolver for the authSignout field.
func (r *mutationResolver) AuthSignout(ctx context.Context) (*model.UserAuthState, error) {
	panic(fmt.Errorf("not implemented: AuthSignout - authSignout"))
}

// CreateStream is the resolver for the createStream field.
func (r *mutationResolver) CreateStream(ctx context.Context, name string) (*model.DataStream, error) {
	panic(fmt.Errorf("not implemented: CreateStream - createStream"))
}

// DeleteStream is the resolver for the deleteStream field.
func (r *mutationResolver) DeleteStream(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	panic(fmt.Errorf("not implemented: DeleteStream - deleteStream"))
}

// DeleteEvents is the resolver for the deleteEvents field.
func (r *mutationResolver) DeleteEvents(ctx context.Context, streamID *uuid.UUID, after *time.Time, before *time.Time) ([]uuid.UUID, error) {
	panic(fmt.Errorf("not implemented: DeleteEvents - deleteEvents"))
}

// RefreshStreamPushKey is the resolver for the refreshStreamPushKey field.
func (r *mutationResolver) RefreshStreamPushKey(ctx context.Context, streamID uuid.UUID) (*model.DataStream, error) {
	panic(fmt.Errorf("not implemented: RefreshStreamPushKey - refreshStreamPushKey"))
}

// ClearStreamPushKey is the resolver for the clearStreamPushKey field.
func (r *mutationResolver) ClearStreamPushKey(ctx context.Context, streamID uuid.UUID) (*model.DataStream, error) {
	panic(fmt.Errorf("not implemented: ClearStreamPushKey - clearStreamPushKey"))
}

// UpdateStreamName is the resolver for the updateStreamName field.
func (r *mutationResolver) UpdateStreamName(ctx context.Context, streamID uuid.UUID, name string) (*model.DataStream, error) {
	panic(fmt.Errorf("not implemented: UpdateStreamName - updateStreamName"))
}

// AuthSessionState is the resolver for the authSessionState field.
func (r *queryResolver) AuthSessionState(ctx context.Context) (*model.UserAuthState, error) {
	panic(fmt.Errorf("not implemented: AuthSessionState - authSessionState"))
}

// AuthSigninState is the resolver for the authSigninState field.
func (r *queryResolver) AuthSigninState(ctx context.Context) (*model.SigninState, error) {
	panic(fmt.Errorf("not implemented: AuthSigninState - authSigninState"))
}

// Streams is the resolver for the streams field.
func (r *queryResolver) Streams(ctx context.Context) ([]model.DataStream, error) {
	panic(fmt.Errorf("not implemented: Streams - streams"))
}

// Stream is the resolver for the stream field.
func (r *queryResolver) Stream(ctx context.Context, id *uuid.UUID) (*model.DataStream, error) {
	panic(fmt.Errorf("not implemented: Stream - stream"))
}

// Feed is the resolver for the feed field.
func (r *queryResolver) Feed(ctx context.Context, from *time.Time, to *time.Time, streamID *uuid.UUID, logLevel *model.LogLevel, clientIP *string, transactionID *string) ([]model.StreamEvent, error) {
	panic(fmt.Errorf("not implemented: Feed - feed"))
}

// Activity is the resolver for the activity field.
func (r *queryResolver) Activity(ctx context.Context, from *time.Time, to *time.Time) ([]model.ActivityPoint, error) {
	panic(fmt.Errorf("not implemented: Activity - activity"))
}

// Stream is the resolver for the stream field.
func (r *streamEventResolver) Stream(ctx context.Context, obj *model.StreamEvent) (*model.DataStreamInfo, error) {
	panic(fmt.Errorf("not implemented: Stream - stream"))
}

// Feed is the resolver for the feed field.
func (r *subscriptionResolver) Feed(ctx context.Context, streamID *uuid.UUID, logLevel *model.LogLevel, clientIP *string, transactionID *string) (<-chan []model.StreamEvent, error) {
	panic(fmt.Errorf("not implemented: Feed - feed"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// StreamEvent returns StreamEventResolver implementation.
func (r *Resolver) StreamEvent() StreamEventResolver { return &streamEventResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type streamEventResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
